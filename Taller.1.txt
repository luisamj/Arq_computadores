Taller 1.

1. Escriba los 4 principios de diseño de hardware aprendidos en clase.
	1. la simplicidad favorece la regularidad
	2. mas pequeño mas rápido
	3. hacer el caso común primero
	4. grandes diseños demanadan grandes compromisos

2. Convertir a instrucciones de bajo nivel.

int x=0; 			x=%l1
int y =8; 			y= %l2
int z = 1; 			z=%l3
y=x+3;

z=z+3;

x=(x-z)+(3+y);

        add %g0,0,%l1
	add %g0,8,%l2
	add %g0,1,%l3

	add %l1,3,%l2
	add %l3,3,%l3

	sub %l1,%l3,%l4
	add %l2,3,%l5
	add %l4,%l5;%l1

3. Usar el ld, y st.

a[4]= a[2]+x;       a=%l1  x=%l2

ld  %l1,8,%l3
add %l2,%l3,%l4
st  %l4,%l1,16


y[0] = y[40]+13;     y=%l1

ld  %l1,(40*4),%l2
add %l2,13,%l3
st  %l3,%l1,(0*4)



4. Convertir a lenguaje de maquina.
a.
int main(){
	
	int i =3; p=2;
	return i+3;
}


<main>

add %g0,3,%l1
add %g0,2,%l2
add %l1,3,O1

10100010000000000010000000000011         0xA2002003
10100100000000000010000000000010	 0xA4002002			
10101101000000100110000000000011	 0xA2026003




b.
int main(){
	int p=3; x=1; z=4;
	int w=0; 
	w=(p+40)+(x-z);
	return 0; 
}


<main>
add %g0,3,%l1
add %g0,1,%l2
add %g0,4,%l3
add %g0,0,%l4
add %l1,40,%l5
sub %l2,%l3,%l6
add %l5,%l6,%l7
add %g0,%l7,O0

10100010000000000010000000000011	0xA2000203
10100100000000000010000000000001	0xA4002001
10100110000000000010000000000100	0xA6002001
10101000000000000010000000000000	0xA8002000
10101000000000000010000000101000	0xAA002028
10101100001001001000000000010011	0xAC248013
10101110000001011000000000010110	0xAE058016
10010000000000000000000000010111	0x90000017



5. Inicializar las siguientes variables negativas usando OR.
n=-12,
	or %g0,-12,%l1
	

a=-11,
	or %g0,-11,%l2
	
b=-14,
	or %g0,-14,%l3

